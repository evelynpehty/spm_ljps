{"version":3,"file":"time.js","sources":["../../src/util/time.js"],"sourcesContent":["export const convert12hTo24h = (abbr, hour) => {\n  if (abbr === 'am' && hour === 12) {\n    return 0\n  }\n\n  if (abbr === 'am') {\n    return hour\n  }\n\n  if (abbr === 'pm' && hour === 12) {\n    return 12\n  }\n\n  return hour + 12\n}\n\nexport const convert24hTo12h = hour => hour % 12 || 12\nexport const convertTimeToDate = time => time ? (time instanceof Date ? new Date(time) : new Date(`1970-01-01 ${time}`)) : null\nexport const getAmPm = (date, locale) => {\n  if (date.toLocaleTimeString(locale).includes('AM')) {\n    return 'am'\n  }\n\n  if (date.toLocaleTimeString(locale).includes('PM')) {\n    return 'pm'\n  }\n\n  return date.getHours() >= 12 ? 'pm' : 'am'\n}\n\nexport const getListOfHours = locale => Array.from({ length: isAmPm(locale) ? 12 : 24 }, (_, i) => {\n  return {\n    value: isAmPm(locale) ? i + 1 : i,\n    label: (isAmPm(locale) ? i + 1 : i).toLocaleString(locale)\n  }\n})\n\nexport const getListOfMinutes = (locale, valueAsString = false) => Array.from({ length: 60 }, (_, i) => {\n  const d = new Date()\n  d.setMinutes(i)\n  return {\n    value: valueAsString ? i.toString() : i,\n    label: d\n          .toLocaleTimeString(locale, {\n            hour: '2-digit',\n            hour12: false,\n            minute: '2-digit',\n            second: '2-digit'\n          })\n          .split(':')[1]\n  }\n})\n\nexport const getListOfSeconds = (locale, valueAsString = false) => Array.from({ length: 60 }, (_, i) => {\n  const d = new Date()\n  d.setSeconds(i)\n  return {\n    value: valueAsString ? i.toString() : i,\n    label: d\n          .toLocaleTimeString(locale, {\n            hour: '2-digit',\n            hour12: false,\n            minute: '2-digit',\n            second: '2-digit'\n          })\n          .split(':')[2]\n  }\n})\n\nexport const getSelectedHour = (date, locale) => date ? (isAmPm(locale) ? convert24hTo12h(date.getHours()) : date.getHours()) : ''\n\nexport const getSelectedMinutes = date => (date ? date.getMinutes() : '')\n\nexport const getSelectedSeconds = date => (date ? date.getSeconds() : '')\n\nexport const isAmPm = locale => ['am', 'AM', 'pm', 'PM'].some(el => new Date().toLocaleString(locale).includes(el))\n\nexport const isValidTime = time => {\n  const d = new Date(`1970-01-01 ${time}`)\n  return d instanceof Date && d.getTime()\n}\n"],"names":["convert12hTo24h","abbr","hour","convert24hTo12h","convertTimeToDate","time","Date","getAmPm","date","locale","toLocaleTimeString","includes","getHours","getListOfHours","Array","from","length","isAmPm","_","i","value","label","toLocaleString","getListOfMinutes","valueAsString","d","setMinutes","toString","hour12","minute","second","split","getListOfSeconds","setSeconds","getSelectedHour","getSelectedMinutes","getMinutes","getSelectedSeconds","getSeconds","some","el","isValidTime","getTime"],"mappings":"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"}