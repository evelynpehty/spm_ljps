#This is an optional tag. This will be the workflow name appearing on the Actions tab of your git repo
name: Integration Workflow

#Specifies the trigger for this workflow. This workflow will be triggered on push event, 
#that is every time someone pushes a change to the repository or merges a pull request. 
#This is triggered by a push to every branch; for examples of syntax that runs only on 
#pushes to specific branches, paths, or tags, see "Workflow syntax for GitHub Actions."

on: 
  push:
    paths:
      - backend/**
    branches:
      main
    
#Groups together all the jobs that run in the Demo Workflow workflow.
jobs:
  #Defines a job named build. The child keys will define properties of the job.
  build:
    #Configures the job to run on the latest version of an Ubuntu Linux runner.
    runs-on: ubuntu-latest

    #Groups together all the steps that run in the check-bats-version job. 
    #Each item nested under this section is a separate action or shell script.
    steps:
      #The uses keyword specifies that this step will run v3 of the actions/checkout action. 
      #This is an action that checks out your repository onto the runner, 
      #allowing you to run scripts or other actions against your code (such as build and test tools). 
      #You should use the checkout action any time your workflow will run against the repository's code.
      - uses: actions/checkout@v3
      - name: Set up Python 3.x
        #This step uses the actions/setup-python@v4 action to install the 
        #specified version of the python (this example uses v3.x which is the latest minor version in 3.x series). 
        #This puts both the python commands in your PATH.
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        #The run keyword tells the job to execute a command on the runner.
        #installs pip and flake 8 also if requirements.txt is present then installs all the dependencies specified there
        run: |
          python -m pip install --upgrade pip
          python -m pip install config
          python -m pip install flake8
          python -m pip install flask-sqlalchemy
          python -m pip install flask
          python -m pip install Flask-Testing
          python -m pip install flask-cors
          python -m pip install mysql-connector
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Write config
        run: |
          touch backend/config.py
          echo '${{ secrets.CONFIG }}' >> backend/config.py
          cat  backend/config.py

      - name: Lint with flake8
        #runs flake8 over the code
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run unit and integration tests
        #runs the unittest
        run: |
          python backend/tests_unit.py
          python backend/tests_integration.py